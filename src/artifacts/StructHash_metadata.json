{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "StructHash implements hashing for structs, incorporating type tags for domain separation. The goals of this library are: * Collision resistance: it should not be possible to find two semantically distinct values that   produce the same digest. * Simplicity: implementations should be simple to understand and write, as these methods must   be implemented in multiple languages and environments, including zkSNARK circuits. * Incremental openings: it should be possible to incrementally open a nested struct without   needing to open (very many) extra fields (i.e. the struct should be \"Merkle-ized\").",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "Structural hashing routines used for RISC Zero data structures.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/RiscZeroGroth16Verifier_flattened.sol": "StructHash"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"src/RiscZeroGroth16Verifier_flattened.sol": {
			"keccak256": "0x36be16af5344eb734caee43431bff7014a3d6cd532b4745decd89f33bae3d95e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://25a4b6b847f28d4f6820709e51851210f4b30293172801e22d88f0cdfaf13578",
				"dweb:/ipfs/QmSzVUSwUbTQaf3WaWFEsNyi6SbUPNck3yPHL4HVM78Hhp"
			]
		}
	},
	"version": 1
}