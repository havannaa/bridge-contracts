{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "control_root",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "bn254_control_id",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "bits",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "SafeCastOverflowedUintDowncast",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "received",
						"type": "bytes4"
					},
					{
						"internalType": "bytes4",
						"name": "expected",
						"type": "bytes4"
					}
				],
				"name": "SelectorMismatch",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "VerificationFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "BN254_CONTROL_ID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "CONTROL_ROOT_0",
				"outputs": [
					{
						"internalType": "bytes16",
						"name": "",
						"type": "bytes16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "CONTROL_ROOT_1",
				"outputs": [
					{
						"internalType": "bytes16",
						"name": "",
						"type": "bytes16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "SELECTOR",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "seal",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "imageId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "journalDigest",
						"type": "bytes32"
					}
				],
				"name": "verify",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes",
								"name": "seal",
								"type": "bytes"
							},
							{
								"internalType": "bytes32",
								"name": "claimDigest",
								"type": "bytes32"
							}
						],
						"internalType": "struct Receipt",
						"name": "receipt",
						"type": "tuple"
					}
				],
				"name": "verifyIntegrity",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[2]",
						"name": "_pA",
						"type": "uint256[2]"
					},
					{
						"internalType": "uint256[2][2]",
						"name": "_pB",
						"type": "uint256[2][2]"
					},
					{
						"internalType": "uint256[2]",
						"name": "_pC",
						"type": "uint256[2]"
					},
					{
						"internalType": "uint256[5]",
						"name": "_pubSignals",
						"type": "uint256[5]"
					}
				],
				"name": "verifyProof",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"SafeCastOverflowedUintDowncast(uint8,uint256)": [
					{
						"details": "Value doesn't fit in an uint of `bits` size."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"verify(bytes,bytes32,bytes32)": {
					"details": "This method additionally ensures that the input hash is all-zeros (i.e. no committed input), the exit code is (Halted, 0), and there are no assumptions (i.e. the receipt is unconditional).",
					"params": {
						"imageId": "The identifier for the guest program.",
						"journalDigest": "The SHA-256 digest of the journal bytes.",
						"seal": "The encoded cryptographic proof (i.e. SNARK)."
					}
				},
				"verifyIntegrity((bytes,bytes32))": {
					"params": {
						"receipt": "The receipt to be verified."
					}
				}
			},
			"stateVariables": {
				"CONTROL_ROOT_0": {
					"details": "This value controls what set of recursion programs (e.g. lift, join, resolve), and therefore what version of the zkVM circuit, will be accepted by this contract. Each instance of this verifier contract will accept a single release of the RISC Zero circuits. New releases of RISC Zero's zkVM require updating these values. These values can be calculated from the [risc0 monorepo][1] using: `cargo xtask bootstrap`. [1]: https://github.com/risc0/risc0"
				},
				"SELECTOR": {
					"details": "The selector is taken from the hash of the verifier parameters including the Groth16      verification key and the control IDs that commit to the RISC Zero circuits. If two      receipts have different selectors (i.e. different verifier parameters), then it can      generally be assumed that they need distinct verifier implementations. This is used as      part of the RISC Zero versioning mechanism.      A selector is not intended to be collision resistant, in that it is possible to find      two preimages that result in the same selector. This is acceptable since it's purpose      to a route a request among a set of trusted verifiers, and to make errors of sending a      receipt to a mismatching verifiers easier to debug. It is analogous to the ABI      function selectors."
				}
			},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"SelectorMismatch(bytes4,bytes4)": [
					{
						"notice": "Error raised when this verifier receives a receipt with a selector that does not match         its own. The selector value is calculated from the verifier parameters, and so this         usually indicates a mismatch between the version of the prover and this verifier."
					}
				],
				"VerificationFailed()": [
					{
						"notice": "Error raised when cryptographic verification of the zero-knowledge proof fails."
					}
				]
			},
			"kind": "user",
			"methods": {
				"CONTROL_ROOT_0()": {
					"notice": "Control root hash binding the set of circuits in the RISC Zero system."
				},
				"SELECTOR()": {
					"notice": "A short key attached to the seal to select the correct verifier implementation."
				},
				"VERSION()": {
					"notice": "Semantic version of the the RISC Zero system of which this contract is part."
				},
				"verify(bytes,bytes32,bytes32)": {
					"notice": "Verify that the given seal is a valid RISC Zero proof of execution with the     given image ID and journal digest. Reverts on failure."
				},
				"verifyIntegrity((bytes,bytes32))": {
					"notice": "Verify that the given receipt is a valid RISC Zero receipt, ensuring the `seal` is valid a cryptographic proof of the execution with the given `claim`. Reverts on failure."
				}
			},
			"notice": "Groth16 verifier contract for RISC Zero receipts of execution.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/RiscZeroGroth16Verifier.sol": "RiscZeroGroth16Verifier"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"src/Groth16Verifier.sol": {
			"keccak256": "0xd574a822c4033dc5708761092c14d69604901362879c97addb6fb762643c763e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://448fa8f2c0b465f9d78a762b598d3c6acdc76d3970e3d96a8feddb5e6cfc5ba0",
				"dweb:/ipfs/QmXEBRDLhZbUmZcuTNL3cwKWs3ruahQQnthJNLaYQ53Uks"
			]
		},
		"src/RiscZeroGroth16Verifier.sol": {
			"keccak256": "0x4e2ac7d2cf7a92d0a6cfcccb87cd6727b37acf3a06a8acdb572052bde3e40cc6",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a1736a25a0405b6dc4e2821a896b8de05d65ee869dc56ca28b718615e7b9343d",
				"dweb:/ipfs/QmRixWE2Le9vnszSBNqLxHavHodpWMDJhga4cbMeZoasWS"
			]
		},
		"src/interfaces/IRiscZeroSelectable.sol": {
			"keccak256": "0xcccd0cab8b80689e669d8d36cfa7f141217225061f748b79fd58823322713a36",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://4df8bc3d06cc9c683cceb8079ac68fdc5605f192b0c513c91105a97568afe499",
				"dweb:/ipfs/QmRJG4zHJQGxRrrX5K2txXvx6d7tNWwQp9V8TpTT3RyNb1"
			]
		},
		"src/interfaces/IRiscZeroVerifier.sol": {
			"keccak256": "0x282a04fa92a55f04092aa15c87ee72b87f959fcfc853ed2a89be6758d7c2c5f4",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://52c74381a5d81715ce1b780c996a0a44d893077ddc775eaf62c091599a9ac910",
				"dweb:/ipfs/QmbDyuhPsaBDTaiQo6xN1qkeLv1fSY3PSHUQ5ogfQnVC4g"
			]
		},
		"src/libraries/ControlID.sol": {
			"keccak256": "0x611eb30b451b00977c13e311b46b18d4d455ce74d401e08472b8e08a54a67fb6",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://afeb6bd5efceb1a65f178ab5a770efd82648e524072de6b120e00fb648709320",
				"dweb:/ipfs/QmfLLS2CwHvkaqXqraVvv3wCGXHNgMUgZyCugcEFPqoRQv"
			]
		},
		"src/utils/StructHash.sol": {
			"keccak256": "0x6d9ca75cdff3ad84a9017b422ecff5a0d2129bb12eef47e1d10c028e3e0970b7",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://840fe77226abe58d473337e8b7d66e2ecedc726dd633a42532f17ac867e384e6",
				"dweb:/ipfs/QmVK2m33YFv45kFbAdSqic3t1kfXeXLbwYgyWetrTxU5yG"
			]
		},
		"src/utils/Util.sol": {
			"keccak256": "0xb0814d490813de58b9619123bd0c475accb564b59b558b9099762b1a075f81f7",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://4f8222693e4cd1566767add3918293a37ae32d22af34aab2f2aa4a7742c9d3c2",
				"dweb:/ipfs/QmdtXUgB8TSo5R6fV7592EYMAZ9KpoNamvYMP78pt5nnEf"
			]
		}
	},
	"version": 1
}